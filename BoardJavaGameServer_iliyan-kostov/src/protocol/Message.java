package protocol;

/**
 * <p>
 * Абстрактен базов клас за съобщенията в рамките на системата.
 * <p>
 * Когато клиентът изисква данни, той изпраща съобщение с празни полета, които
 * сървърът попълва, след което сървърът връща съобщението с попълнените данни.
 * <p>
 * Възможно е сървърът да не отговори на съобщение или в отговор да изпрати едно
 * или няколко съобщения от същия или различни типове, до същия или различен(и)
 * клиент(и).
 * <p>
 * Тъй като състоянието на данните се счита за вярно (актуално) единствено на
 * сървъра, клиентите не отговарят на получени от сървъра съобщения (сървърът
 * разполага с всички данни и не е необходимо да запитва клиентите).
 * <p>
 * Съобщенията имплементират класа {@link java.io.Serializable}, т.е. могат да
 * бъдат изпращани по мрежата, съхранявани във файлове и др.
 *
 * @author iliyan-kostov <https://github.com/iliyan-kostov/>
 */
public abstract class Message implements java.io.Serializable {

    /**
     * <p>
     * Списък на използваните в рамките на системата типове съобщения (възможно
     * е да бъдат добавяни или премахвани).
     * <p>
     * Клиентите не могат да разменят директни съобщения помежду си - необходимо
     * е да ги изпратят до сървъра, който ги пренасочва. В такъв смисъл
     * комуникацията е клиент-сървър или сървър-клиент(и).
     */
    public static enum MESSAGETYPE {
        // посока (К клиент / С сървър):
        AUTH_LOGIN, // логин или регистрация (К -> С -> К)
        AUTH_LOGOUT, // изход от системата (К -> С; С -> К)
        LOBBY_PLAYERSTATS, // игрални статистики за даден потребител (К -> С -> К)
        LOBBY_RANKING, // класация за даден режим на игра и горна/долна граница (К -> С -> К)
        LOBBY_NEWGAMEREQUEST, // заявка за нова игра от определен режим (К -> С -> К)
        LOBBY_SYNC, // синхронизиращо съобщение за лоби (С -> К)
        BOARD_GAMESTARTED, // стартирана игра, в която потребителят участва (С -> К)
        BOARD_GAMESYNC, // синхронизиращо съобщение за игра (С -> К)
        BOARD_MOVEFIGURES, // местене на фигури (К -> С -> К; С -> К)
        BOARD_REMOVEFIGURES, // премахване на фигура от игра (С -> К)
        BOARD_ENDTURN, // край на ход (К -> С -> К; С -> К)
        BOARD_ENDGAME, // край на игра (С -> К)
        BOARD_SURRENDER, // играчът се предава (К -> С -> К)
        CHAT_MESSAGE // chat message (client -> server -> client)
    }

    /**
     * <p>
     * Изпращач на съобщението (клиент -> сървър) или получател на съобщението
     * (сървър -> клиент).
     * <p>
     * Стойността може да бъде променяна - за валидация при получаване от
     * сървъра.
     */
    public String username;

    /**
     * <p>
     * Тип на съобщението - за разпознаване при сериализация.
     */
    public final MESSAGETYPE messageType;

    public Message(String username, MESSAGETYPE messageType) {
        this.username = username;
        this.messageType = messageType;
    }
}
